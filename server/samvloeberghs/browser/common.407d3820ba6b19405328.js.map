{"version":3,"sources":["./src/app/shared/data.service.ts","./src/app/shared/data.service.ts.pre-build-optimizer.js"],"names":["http","transferState","getData","file","key","this","hasKey","get","url","pipe","response","set","getDataText","responseType","DataService","ngInjectableDef","factory","token","providedIn"],"mappings":"2FACA,8GAOA,aAKE,WACmBA,EACAC,GADA,KAAAD,OACA,KAAAC,gBCmBjB,ODfF,YAAAC,QAAA,SAAQC,GAAR,WAEQC,EAAM,YAAaD,GACzB,OAAIE,KAAKJ,cAAcK,OAAOF,GACrB,YAAGC,KAAKJ,cAAcM,IAAIH,EAAK,OAEjCC,KAAKL,KACTO,IAAI,GAAG,IAAYC,IAAML,GACzBM,KACC,aAAI,SAAAC,GAAY,SAAKT,cAAcU,IAAIP,EAAKM,QAKlD,YAAAE,YAAA,SAAYT,GAAZ,WAEQC,EAAM,YAAaD,GACzB,OAAIE,KAAKJ,cAAcK,OAAOF,GACrB,YAAGC,KAAKJ,cAAcM,IAAIH,EAAK,OAGjCC,KAAKL,KACTO,IAAI,GAAG,IAAYC,IAAML,EAAQ,CAACU,aAAc,SAChDJ,KACC,aAAI,SAAAC,GAAY,SAAKT,cAAcU,IAAIP,EAAKM,QCVhDI,EAAYC,gBAAkB,KAAsB,CAAEC,QAAS,WAAiC,OAAO,IAAIF,EAAY,KAAY,KAAgB,KAAY,OAAuBG,MAAOH,EAAaI,WAAY,SAC/MJ,ED1BX","file":"common.407d3820ba6b19405328.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { TransferState, makeStateKey } from '@angular/platform-browser';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DataService {\n\n  constructor(\n    private readonly http: HttpClient,\n    private readonly transferState: TransferState,\n  ) {\n  }\n\n  getData(file: string): Observable<any> {\n\n    const key = makeStateKey(file);\n    if (this.transferState.hasKey(key)) {\n      return of(this.transferState.get(key, null));\n    }\n    return this.http\n      .get(`${environment.url}${file}`)\n      .pipe(\n        tap(response => this.transferState.set(key, response)),\n      );\n\n  }\n\n  getDataText(file: string): Observable<any> {\n\n    const key = makeStateKey(file);\n    if (this.transferState.hasKey(key)) {\n      return of(this.transferState.get(key, null));\n    }\n\n    return this.http\n      .get(`${environment.url}${file}`, {responseType: 'text'})\n      .pipe(\n        tap(response => this.transferState.set(key, response)),\n      );\n\n  }\n\n}\n","import { TransferState, makeStateKey } from '@angular/platform-browser';\nimport { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/platform-browser\";\nvar DataService = /** @class */ (function () {\n    function DataService(http, transferState) {\n        this.http = http;\n        this.transferState = transferState;\n    }\n    DataService.prototype.getData = function (file) {\n        var _this = this;\n        var key = makeStateKey(file);\n        if (this.transferState.hasKey(key)) {\n            return of(this.transferState.get(key, null));\n        }\n        return this.http\n            .get(\"\" + environment.url + file)\n            .pipe(tap(function (response) { return _this.transferState.set(key, response); }));\n    };\n    DataService.prototype.getDataText = function (file) {\n        var _this = this;\n        var key = makeStateKey(file);\n        if (this.transferState.hasKey(key)) {\n            return of(this.transferState.get(key, null));\n        }\n        return this.http\n            .get(\"\" + environment.url + file, { responseType: 'text' })\n            .pipe(tap(function (response) { return _this.transferState.set(key, response); }));\n    };\n    DataService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DataService_Factory() { return new DataService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TransferState)); }, token: DataService, providedIn: \"root\" });\n    return DataService;\n}());\nexport { DataService };\n"],"sourceRoot":"webpack:///"}